Series-09
=========

Rathesan Iyadurai (10-107-688)

Exercise 1
----------

a) What criteria might you use to prioritize threads (list at least 5 different
   criteria)?

b) What are different possible definitions of fairness (list at least 3
   different definitions)?
   
c) What are Pass-Throughs and Lock-Splitting?

d) When should you consider using optimistic methods (list at least 3 different
   enablers)?


Exercise 2
----------

The Lock-Splitting approach uses two different locks for position and dimension
changes.

In the Pass-Through approach, the host object (PassThroughShape) is not
synchronized, but the helper object (Dimension and Position) are individually
synchronized.


Exercise 3
----------

a) How do threads waiting in a Thread.join() loop get aware of that threadâ€™s
   termination?

   They get notified via a notifyAll when the thread terminates. For details on
   which variables the implementation loops, etc, see the Thread.join() doc:
   https://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#join(long)

b) How could you optimize the code below?

       Thread t = new Thread(new Runnable() {
           @Override
           public void run() {
               <insert your code here>
           }
       });
       t.start();
       t.join();

   This snippet spawns a thread and immediately waits for it, i.e., it's a
   sequential program. Hence, there's no benefit of using a thread here, only
   the unnecessary overhead of thread creation, synchronization and handling of
   InterruptedExpections (which is not depicted here). The "optimized" snippet
   would just look like this:

       <insert your code here>

   NB: I was wondering whether the compiler inlines the run() code if it
   detects a start() join() invoke sequence, but apparently it does not. Here's
   the relevant section of the bytecode (obtained with "javap"):
   
       11: invokespecial #5    // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;)V
       14: astore_1
       15: aload_1
       16: invokevirtual #6    // Method java/lang/Thread.start:()V
       19: aload_1
       20: invokevirtual #7    // Method java/lang/Thread.join:()V

c) Are String objects in Java mutable or immutable? Justify your answer!

   They are immutable. According to the Java specs, a "String object has a
   constant (unchanging) value" [0].

   According to this stackoverflow answer [1], this statement only holds if you
   use the public API only. You could always fiddle with the internal state
   using Java's reflection capabilities.

   Note that while String objects themselves are immutable, their references
   may be changed. Good example here [2].

   [0]: https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.3.3
   [1]: https://stackoverflow.com/a/20945113/1314848
   [2]: https://stackoverflow.com/a/17942294/1314848

d) Does the FSP progress property below enforce fairness? Justify your answer!

       progress HeadsOrTales = {head, tale}

   No, it does not enforce fairness. It only asserts that at least one of
   {head, tale} will be executed infinitely often. If you want fair choice,
   you'd need a progress property for each of them.

   See lecture 5 slide 8.
