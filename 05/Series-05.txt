Series-05
=========

Rathesan Iyadurai (10-107-688)

Exercise 1
----------

a. What is a guarded method and when should it be preferred over balking?

   A method that allows a thread to wait for a state change by suspending it.
   This approach is preferable anytime you can deal with waiting and have some
   guarantee that the relevant state changes will happen. See slide 26 and 27
   of lecture 5 for an exhaustive list.

b. Why must you re-establish the class invariant before calling wait()?

   wait() releases the synchronization lock, so we must treat calling it the
   same as exiting the critical section in order to leave the object in a
   consistent state.

c. What is, in your opinion, the best strategy to deal with an
   InterruptedException? Justify your answer!

   It really depends on what kind of application you are writing, but I would
   generally cleanup, check invariants and raise an exception if necessary.
   This way the caller has to explicitly handle the case. This seems like the
   safest bet, albeit annoying.

d. How can you detect deadlocks? How can you avoid it?

   Ways to detect it:

       - Model your whole system in FSP and use the LTSA tool to find traces
         that lead to a deadlock ;)
       - Repeatedly check for waits-for cycles 

    Avoid it by preventing waits-for cycles by having your concurrent entities
    conform to a certain protocol. See answer to Exercise 2 for examples.

    Or just write sequential programs for the rest of you life.

e. Why it is generally a good idea to avoid deadlocks from the beginning
   instead of relying on deadlock detection techniques?

   Deadlock detection is not the end of the story. The often require followup
   actions, such as rolling back changes in a database system. These measures
   can be complex and time/memory consuming, so all the better if they can be
   avoided.

f. Why is progress a liveness rather than a safety issue?

   Safety is more about nothing bad happening. From that perspective, if
   nothing ever happens, i.e., nothing is progressing, nothing bad can ever
   happen.

   That's why we usually talk about progress (an action is eventually executed)
   in the context of liveness, where we want something good to eventually
   happen.

g. Why should you usually prefer notifyAll() to notify()?

   notify() should be used if there's some specific reason why only one of the
   threads in the wait-set may perform the action on the state change.

   However, we usually have the case that ALL waiting threads may react to the
   state change.

   I like the reasoning here (I'm mostly adding this as a later reference for
   myself. Feel free to ignore): https://stackoverflow.com/a/3186336/1314848

h. What is the difference and what are the similarities between a nested
   monitor lockout (a.k.a. nested deadlock) and a classical deadlock?

   They're similar in the way that they both occur because of some circular
   dependency, i.e., processes wait on each other for some resource (in a
   classical deadlock), or some signal (in nested deadlock).

   So a classical deadlock occurs because shared resources are withold from one
   another. The nested deadlock occurs because the process that can send the
   signal cannot acquire a lock because the waiting thread is still holding it.

Exercise 2
----------

1. One of the philosopher has to pick up the forks in reverse order. This
   breaks the waits-for cycle. Starvation is not possible, because if one
   philosopher wants the fork that is currently in use, he will be the next one
   to get it.

2. Introduce a "waiter" mutex that all philosophers have access to.
   Philosophers ask the waiter for permission to pick up both forks and the waiter
   only allows one philosopher to do so. This approach is not particularly
   fair, since one philosopher might just never get his two forks, since his
   neighbors are alternately acquiring the forks.

3. Similar to 2, but allow only n - 1 philosophers to take a seat whereas n is
   the number of forks. Philosophers that are not at the table wait in a FIFO
   queue, and philosophers at the table that are done eating go wait in the
   FIFO queue. Thus all philosophers eventually get to eat -> no one starves.

4. Chandy/Misra solution: Philosophers make their forks dirty when eating.
   Philosophers are numbered and for each neighboring pair of philosophers the one
   with the lower number gets the fork in between first. When a philosopher wants
   the fork, he asks his neighbor. The neighbor will keep his fork if it's clean,
   but if it's dirty, he'll clean it and send it over. This protocol is fair,
   since the philosophers that haven't eaten last get the forks next.


Exercise 3
----------

Introduce a "waiter" mutex:

    PHIL = (
      sitdown -> waiter.acquire -> right.get -> left.get -> eat ->
      left.put -> right.put -> arise -> waiter.release -> PHIL
    ).

    FORK = (get -> put -> FORK).

    LOCK = (acquire -> release -> LOCK).

    ||DINERS(N=5) = forall [i:0..N-1](
      phil[i]:PHIL
      ||
      phil[j:0..N-1]::waiter:LOCK
      ||
      {phil[i].left,phil[((i-1)+N)%N].right}::FORK
    ).


Exercise 4
----------

Feel free to remove any of the start options from the MAZE state, to test
different shortest paths:

    MAZE = (
        start -> S0
        |
        start -> S1
        |
        start -> S2
        |
        start -> S3
        |
        start -> S4
        |
        start -> S5
        |
        start -> S6
        |
        start -> S7
        |
        start -> S8
    ),
    S0 = (
      north -> STOP
      |
      east -> S1
    ),
    S1 = (
      east -> S2
      |
      south -> S4
      |
      west -> S0
    ),
    S2 = (
      south -> S5
      |
      west -> S1
    ),
    S3 = (
      east -> S4
      |
      south -> S6
    ),
    S4 = (
      north -> S1
      |
      west -> S3
    ),
    S5 = (
      north -> S2
      |
      south -> S8
    ),
    S6 = (
      north -> S3
    ),
    S7 = (
      east -> S8
    ),
    S8 = (
      north -> S5
      |
      west -> S7
    ).
