Series-12
=========

Rathesan Iyadurai (10-107-688)


Exercise 1
----------

a) What is a Software Architecture? What is its benefit?

   Software Architecture defines the design of a software system on a high
   level in terms of large-scale components, e.g., model, view, controller,
   and how they interact.

   It helps developers reason about the software system. It often introduces
   common vocabulary, such as "models" and "controllers", to ease communication
   and configuration rules and conventions to ease design decisions and reduce
   cowboy coding chaos.

b) What are the potential disadvantages when using layered architectures?

   - Performance could suffer because of passing through layers
   - Complexity and indirection when reading code
   - Low-layer changes could trickle through to the highest layer and
     affect multiple teams responsible for different layers (a little
     far-fetched, I know...this problem probably exists in every kind of
     architecture)

c) Provide an example in which the pattern Specialist Parallelism could be a
   legitimate architectural choice. Justify your answer!

   The Specialist Parallelism Architecture can be applied to any kind of
   pipeline where you have specialized workers in specific stages.

   Real-life example from the company I work at: We elicit a lot of patient
   data from all kinds of health institutions (e.g. hospitals) in Switzerland.
   This patient data needs to be validated, imported into our database,
   pre-processed and classified, i.e., run through a pipeline.

   We have modelled this by letting the data flow through a pipeline of
   specialized background workers.

     ... -> Validation worker -> Import worker -> Classifier worker -> ...

d) The concepts Result Parallelism, Specialist Parallelism and Agenda
   Parallelism represent three ways of thinking about the problem. Can you tell on
   what they focus? Provide one sentence for each one of them.

   In Result Parallelism, multiple workers produce the parts (results) of a
   more complex whole (result).

   In Specialist Parallelism, each worker is specialized to perform a
   particular task. See 1d) for an example.

   In Agenda Parallelism, workers perform tasks from a blackboard (while
   spawning new ones if necessary) until everything is done. Contrary to the
   workers in Specialist Parallelism, a worker should be able to perform any
   task on the blackboard.

e) What is a Flow Architecture? What are Blackboard Architectures?

   A Flow Architectures describes a system where components pass data to each
   other in one direction only. This can help avoid many synchronization
   problems and also drastically simplify reasoning about data flow.
   
   This architecture can be found in unix "pipes and filters" or modern
   frontend application architectures, such as Facebook's Flux
   (https://facebook.github.io/flux/).

   In a Blackboard Architecture, the components do not directly communicate,
   but post messages to a blackboard and reading messages from a shared
   location (a channel, message queue).

f) Which blackboard style should be preferred when we have multiple processors?
   Why?

   I'd argue that the Agenda Parallelism suits best, since we're dealing with
   arbitrary tasks that do not necessary have to depend on each other as often
   as in the Specialist or Result Parallelism Style.

   More independent tasks means less synchronization overhead and more benefit
   from multiple processors.

g) What are Unix pipes and how do you use them?

   Unix pipes allow you to create a pipeline of processes. A pipeline is simply
   a chain of processes where the standard output of a process feeds into the
   standard input of the next one. For printing line numbers of all C files in
   the current directory in descending order you could run:

       ls | grep \.c$ | xargs -P 4 wc -l | sort -r

   https://explainshell.com/explain?cmd=ls%20%7C%20grep%20%5C.c$%20%7C%20xargs%20-P%204%20wc%20-l%20%7C%20sort%20-r


Exercise 2
----------

- To what extend are we expected to write down FSPs in the exam? Can you
  provide some more sample questions to practice on? Does the syntax have to be
  100% correct in the exam?

- Could you again explain "implement the monitor using semaphore" and
  vice-versa example? I think a lot of students (me included) had some
  difficulties when we first discussed the solution and I'm still not 100% sure
  if I'd do it correctly. I'd be nice to look back at it now that we have some
  more skills :)

- In the exercises we were expected to answer some Java specific questions. I
  had to google most of the stuff since I don't have much experience in
  concurrent Java programming. To what extend should we prepare Java
  concurrency nitty-gritties for the exam?
