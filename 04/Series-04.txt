Series-04
=========

Rathesan Iyadurai (10-107-688)

Exercise 1
----------

a. Why are immutable classes inherently safe?

   An immutable object cannot be changed and therefore cannot be corrupted just
   because multiple processes access it.

b. What is "balking"?

   Balking is throwing an exception if the precondition of a guarded,
   state-dependent action fails.

   NB: If the precondition itself does not depend on shared state, it could be
   checked outside of the guarded action.

c. When is partial synchronization better than full synchronization?

   When you have lots of sections that would be unnecessarily synchronized,
   e.g., methods only working with immutable data.

   Given that scenario, you can have a higher proportion of your program run in
   parallel (because you only synchronize parts that absolutely have to be)
   which can result in a speedup. See Amdahl's Law.

d. How does containment avoid the need for synchronization?

   The contained objects are only being accessed by one thread at the time, so
   there's no need to synchronize operations on the contained objects. This of
   course requires that the "host" object is synchronized.

e. What liveness problems can full synchronization introduce?

   With full synchronization, especially with a balking design, clients have to
   busy wait if requests fail, and there's no guarantee that they will
   eventually continue, thereby starving to death.

f. When is it legitimate to declare only some methods as synchronized?

   When you have sections (or whole methods) in you object that are not
   critical sections, i.e., do not deal with mutable state. Even methods that
   have both critical and uncritical sections could be split up, so that only
   the critical part needs synchronization.


Exercise 2
----------

Pot with M = 3 servings:

    const M = 3

    POT = POT[0],
    POT[i:0..M] = (
        when(i==0) fillpot -> POT[M]
        |
        when(i>0) getserving -> POT[i-1]
    ).

A dinner session could then be modelled with parallel composition:

    ||DINING_SAVAGES = (SAVAGE || COOK || POT).


Exercise 3
----------

    property LIFTCAPACITY = LIFT[0],
    LIFT[i:0..8] = (
        enter -> LIFT[i+1]
        |
        when(i>0) exit -> LIFT[i-1]
        |
        when(i==0)exit -> LIFT[0]
    ).

a. Which values can the variable i take?

   Valid values are 0-8. If you want to include values that result in an error
   state: 0-9.

b. What kind of property is used and what does it guarantee?

   It's a safety property that is used to model a lift that does not allow more
   than 8 enters.

c. Provide an action trace that violates the provided property.

   enter
   enter
   enter
   enter
   enter
   enter
   enter
   enter
   enter

d. Provide an action trace that does not violate the provided property.

   enter
   exit


Exercise 4
----------

You should find a file called "Ex4.java" in the archive. It provides a
thread-safe message queue implementation that relies on balking. You'll find
more details in the Java file.

I used java version 1.8 to compile and run the program. My "java -version"
output:

    java version "1.8.0_25"
    Java(TM) SE Runtime Environment (build 1.8.0_25-b17)
    Java HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)
    
You can compile the file as usual with

    javac Ex4.java

To run some unit tests, execute

    java Ex4 test

To start a producer and a consumer thread that indefinitely spam a message
queue of given size, execute

    java Ex4 <QUEUE_SIZE>

e.g.,

    java Ex4 3
